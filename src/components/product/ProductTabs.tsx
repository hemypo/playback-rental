
import { TabsContent } from '@/components/ui/tabs';
import { BookingPeriod, Product } from '@/types/product';
import { formatDateRange } from '@/utils/dateUtils';
import { Clock, CalendarIcon, CheckIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Link } from 'react-router-dom';
import BookingCalendar from '@/components/BookingCalendar';
import RentalFeatures from './RentalFeatures';

interface ProductTabsProps {
  product: Product;
  bookings?: BookingPeriod[];
  onBookingChange: (booking: BookingPeriod) => void;
  bookingDates: {
    startDate?: Date;
    endDate?: Date;
  };
}

const ProductTabs = ({
  product,
  bookings,
  onBookingChange,
  bookingDates
}: ProductTabsProps) => {
  // Ensure bookings is always an array, even if undefined
  const validBookings = bookings || [];
  
  console.log('üí° validBookings:', validBookings);
  console.log('üí° bookingDates:', bookingDates);
  console.log(
    'üí° nearest:',
    validBookings
      .filter(b => b.startDate && b.endDate)
      .sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime())[0]
  );
  
  return <>
      <TabsContent value="details" className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <RentalFeatures />
          
          {/* Pricing Section */}
          <div className="p-6 rounded-xl glass-card">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 flex items-center justify-center rounded-full bg-primary/10">
                <Clock className="h-5 w-5 text-primary" />
              </div>
              <h3 className="font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã</h3>
            </div>
            <ul className="space-y-2">
              <li className="flex items-center gap-2">
                <span className="text-muted-foreground">4 —á–∞—Å–∞:</span>
                <span className="font-medium">{(product.price * 0.7).toLocaleString()} ‚ÇΩ</span>
                <span className="text-xs text-green-600">(-30%)</span>
              </li>
              <li className="flex items-center gap-2">
                <span className="text-muted-foreground">–°—É—Ç–∫–∏:</span>
                <span className="font-medium">{product.price.toLocaleString()} ‚ÇΩ</span>
              </li>
              <li className="flex items-center gap-2">
                <span className="text-muted-foreground">–æ—Ç 3-–µ—Ö —Å—É—Ç–æ–∫:</span>
                <span className="font-medium">{(product.price * 0.9).toLocaleString()} ‚ÇΩ/–¥–µ–Ω—å</span>
                <span className="text-xs text-green-600">(-10%)</span>
              </li>
              <li className="flex items-center gap-2">
                <span className="text-muted-foreground">–æ—Ç 5 –¥–Ω–µ–π:</span>
                <span className="font-medium">{(product.price * 0.7).toLocaleString()} ‚ÇΩ/–¥–µ–Ω—å</span>
                <span className="text-xs text-green-600">(-30%)</span>
              </li>
            </ul>
          </div>
          
          {/* Availability Section */}
          <div className="p-6 rounded-xl glass-card">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 flex items-center justify-center rounded-full bg-primary/10">
                <CalendarIcon className="h-5 w-5 text-primary" />
              </div>
              <h3 className="font-medium">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</h3>
            </div>
            {product.available ? <div className="text-green-600 font-medium flex items-center gap-2 mb-4">
                <CheckIcon className="h-4 w-4" />
                <span>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞—Ä–µ–Ω–¥—ã</span>
              </div> : <div className="text-red-500 font-medium mb-4">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω</div>}
            
            <div className="text-sm text-muted-foreground">
              {validBookings.length > 0 ? (
                (() => {
                  const nearest = [...validBookings]
                    .filter(booking => booking.startDate && booking.endDate) // Filter out bookings with undefined dates
                    .sort((a, b) => 
                      new Date(a.startDate).getTime() - new Date(b.startDate).getTime()
                    )[0];
                  
                  return nearest ? (
                    <div>
                      <p className="mb-2 font-medium">–ë–ª–∏–∂–∞–π—à–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</p>
                      <div className="text-sm bg-secondary p-2 rounded">
                        {nearest.startDate && nearest.endDate ? 
                          formatDateRange(nearest.startDate, nearest.endDate) : 
                          '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                      </div>
                    </div>
                  ) : (
                    <p>–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.</p>
                  );
                })()
              ) : (
                <p>–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.</p>
              )}
            </div>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="availability">
        <div className="p-6 rounded-xl glass-card">
          <h3 className="font-medium mb-6">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          
          {product.available ? <div className="space-y-6">
              <p className="text-muted-foreground">
                –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–∞—Ç—ã.
              </p>
              
              {validBookings.length > 0 ? (() => {
                const filteredBookings = [...validBookings]
                  .filter(b => b.startDate && b.endDate);
                
                if (filteredBookings.length === 0) {
                  return <p className="mb-4">–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.</p>;
                }
                
                const last = filteredBookings.sort((a, b) => 
                  b.startDate.getTime() - a.startDate.getTime()
                )[0];
                
                return (
                  <p className="mb-4">
                    <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong>{' '}
                    {formatDateRange(last.startDate, last.endDate)}
                  </p>
                );
              })() : (
                <p className="mb-4">–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.</p>
              )}

              {bookingDates.startDate && bookingDates.endDate && (() => {
                const conflict = validBookings.some(b =>
                  b.startDate && b.endDate &&
                  b.startDate.getTime() <= bookingDates.endDate.getTime() &&
                  b.endDate.getTime() >= bookingDates.startDate.getTime()
                );
                return (
                  <p className={`font-semibold ${conflict ? 'text-red-600' : 'text-green-600'}`}>
                    {conflict ? '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' : '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ'}
                  </p>
                );
              })()}
              
              <div className="max-w-md mx-auto">
                <BookingCalendar onBookingChange={onBookingChange} bookedPeriods={validBookings} />
              </div>
            </div> : <div className="text-center py-10">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <CalendarIcon className="h-8 w-8 text-red-500" />
              </div>
              <h3 className="text-xl font-medium mb-2">–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
              <p className="text-muted-foreground mb-6">
                –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–∫–∞—Ç–∞.
              </p>
              <Button asChild>
                <Link to="/catalog">–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</Link>
              </Button>
            </div>}
        </div>
      </TabsContent>
    </>;
};

export default ProductTabs;
